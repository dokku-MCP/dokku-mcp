name: CI

on:
  push:
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  GINKGO_VERSION: 'v2.17.3'

jobs:
  toolchain:
    name: Toolchain
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Restore Go tools cache
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - name: Install development tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: make install-tools

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [toolchain]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build server
        run: make build

      - name: Build all platforms
        run: make build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: binaries
          path: build/

  # Quality checks running in parallel
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: [toolchain]
    strategy:
      fail-fast: false
      matrix:
        check: [format, vet, lint, staticcheck, type, complexity, duplicates, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Restore Go tools cache
        uses: actions/cache@v4
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - name: Run format check
        if: matrix.check == 'format'
        run: |
          make fmt
          git diff --exit-code || (echo "Code not formatted. Run 'make fmt'" && exit 1)

      - name: Run vet
        if: matrix.check == 'vet'
        run: make vet

      - name: Run lint
        if: matrix.check == 'lint'
        run: make lint

      - name: Run staticcheck
        if: matrix.check == 'staticcheck'
        run: make staticcheck

      - name: Run type
        if: matrix.check == 'type'
        run: make type

      - name: Run complexity check
        if: matrix.check == 'complexity'
        run: make cyclo

      - name: Run duplicate code check
        if: matrix.check == 'duplicates'
        run: make dupl

      - name: Run security check
        if: matrix.check == 'security'
        run: make security

  tests:
    name: Tests - unit / integration
    runs-on: ubuntu-latest
    needs: [toolchain]
    strategy:
      fail-fast: false
      matrix:
        test-type: [standard, race]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Restore Go tools cache
        uses: actions/cache@v4
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-bin-${{ env.GO_VERSION }}-${{ hashFiles('Makefile') }}

      - name: Run tests
        if: matrix.test-type == 'standard'
        run: make test

      - name: Run race detector tests
        if: matrix.test-type == 'race'
        run: make test-race

      - name: Upload coverage artifact
        if: matrix.test-type == 'standard'
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: coverage.out

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: [toolchain]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy (dependency vulnerability scanner)
        env:
          OSS_INDEX_USER: ${{ secrets.OSS_INDEX_USER }}
          OSS_INDEX_TOKEN: ${{ secrets.OSS_INDEX_TOKEN }}
        run: |
          if [ -z "$OSS_INDEX_USER" ] || [ -z "$OSS_INDEX_TOKEN" ]; then
            echo "‚ö†Ô∏è OSS Index credentials not configured, skipping Nancy scan"
            echo "üí° Add OSS_INDEX_USER and OSS_INDEX_TOKEN secrets to enable"
            exit 0
          fi
          
          go list -json -deps ./... | docker run --rm -i \
            -e OSS_INDEX_USER \
            -e OSS_INDEX_TOKEN \
            sonatypecommunity/nancy:latest sleuth \
            --username "${OSS_INDEX_USER}" \
            --token "${OSS_INDEX_TOKEN}"

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [toolchain, build, quality-checks, tests, dependency-analysis]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          if [[ "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "‚ùå Quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.tests.result }}" != "success" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          if [[ "${{ needs.dependency-analysis.result }}" != "success" ]]; then
            echo "‚ùå Dependency analysis failed"
            exit 1
          fi
          echo "‚úÖ All CI jobs passed successfully!"

      - name: Post success status
        run: |
          echo "üéâ CI Pipeline completed successfully!"
          echo "üìä All quality checks passed"
          echo "üß™ All tests passed"
          echo "üîí Security analysis passed"
          echo "üìà Dependency analysis completed" 